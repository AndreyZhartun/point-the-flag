{"version":3,"sources":["redux/ActionCreators.js","redux/ActionTypes.js","components/GuessGame.js","components/GuessMap.js","components/Header.js","redux/reducer.js","App.js","redux/configureStore.js","serviceWorker.js","index.js"],"names":["changeGameStatus","status","type","payload","changeCurrentFlag","dispatch","getState","currentIndex","game","currentFlagIndex","addFlagToShownFlags","possibleNewIndexes","Array","flags","length","keys","filter","index","shownFlags","includes","newIndex","Math","floor","random","changeCurrentFlagIndex","handleError","errorMessage","countCorrectAnswer","changeRequestStatus","sent","GuessGame","props","handleConfirmation","fetchAddress","handleStart","isInProgress","setRandomFirstIndex","Jumbotron","className","style","padding","Container","Row","Col","xs","sm","src","this","path","alt","correctAnswers","icon","faMapMarkerAlt","marker","lat","toFixed","lng","Button","color","disabled","requestSent","onClick","Component","connect","state","setTimeout","fetch","baseUrl","then","response","ok","json","error","Error","statusText","message","data","console","log","code","address","country_code","localeCompare","catch","randomFirstIndex","GuessMap","refmarker","createRef","refmap","toggleDraggable","updatePosition","current","newPosition","leafletElement","getLatLng","changeMarkerPosition","componentDidUpdate","invalidateSize","position","map","center","markerPosition","Map","zoom","ref","TileLayer","attribution","url","Marker","draggable","onDragend","Header","Fragment","Navbar","dark","Nav","flexDirection","navbar","NavItem","active","NavLink","faFlag","faQuestion","href","faCode","faAddressCard","NavbarText","initialState","FLAGS","Reducer","action","newMarker","newArray","concat","gameWithNewShownFlags","gameWithNewIndex","newCorrectAnswers","store","createStore","applyMiddleware","thunk","logger","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2fbe7762.chunk.js","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\nimport { baseUrl } from '../shared/nominatim';\r\n\r\nexport const changeMarkerPosition = (lat, lng) => ({\r\n    type: ActionTypes.CHANGE_MARKER_POSITION,\r\n    payload: {\r\n        lat: lat,\r\n        lng: lng,\r\n    }\r\n});\r\n\r\nexport const setRandomFirstIndex = () => (dispatch, getState) => {\r\n    //TODO: initialize new index after Start Game\r\n    const randomFirstIndex = Math.floor(Math.random() * getState().flags.length);\r\n\r\n    dispatch(changeCurrentFlagIndex(randomFirstIndex));\r\n    dispatch(changeGameStatus(true));\r\n}\r\n\r\nexport const changeGameStatus = (status) => ({\r\n    type: ActionTypes.CHANGE_GAME_STATUS,\r\n    payload: {\r\n        status: status\r\n    }\r\n});\r\n\r\nexport const changeCurrentFlag = () => (dispatch, getState) => {\r\n    const currentIndex = getState().game.currentFlagIndex;\r\n\r\n    //TODO: prevent adding duplicates\r\n    dispatch(addFlagToShownFlags(currentIndex));\r\n\r\n    //array substraction\r\n    const possibleNewIndexes = [...Array(getState().flags.length).keys()]\r\n        .filter(index => !getState().game.shownFlags.includes(index));\r\n\r\n    //check if there is unshown flags\r\n    if (possibleNewIndexes.length === 0){\r\n        return;\r\n    }\r\n\r\n    //finding new index\r\n    const newIndex = possibleNewIndexes[Math.floor(Math.random() * possibleNewIndexes.length)]\r\n\r\n    dispatch(changeCurrentFlagIndex(newIndex));\r\n}\r\n\r\nexport const fetchAddress = () => (dispatch, getState) => {\r\n    //var response = fetch(baseUrl + 'lat='+getState().marker.lat+'&lon='+getState().marker.lng);\r\n    //var json = response.json();\r\n    dispatch(changeRequestStatus(true));\r\n    setTimeout(() => {\r\n            dispatch(changeRequestStatus(false))\r\n        },\r\n        1000\r\n    );\r\n    //console.log(json);\r\n    fetch(baseUrl \r\n        + 'lat='+getState().marker.lat\r\n        + '&lon='+getState().marker.lng\r\n        + '&accept-language=en')\r\n        .then(response => {\r\n            if (response.ok){\r\n                return response.json();\r\n            }\r\n            else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                throw new Error(error.message);\r\n            })\r\n        .then((data) => {\r\n            console.log(\"local: \" + getState().flags[getState().game.currentFlagIndex].code);\r\n            console.log(\"got: \" + data.address.country_code);\r\n            if (data.address.country_code\r\n                    .localeCompare(getState().flags[getState().game.currentFlagIndex].code) === 0){\r\n                        dispatch(countCorrectAnswer());\r\n            }\r\n            console.log(data.address);\r\n            dispatch(changeCurrentFlag());\r\n        })\r\n        .catch(error => dispatch(handleError(error.message)));\r\n}\r\n\r\nexport const handleError = (errorMessage) => ({\r\n    type: ActionTypes.HANDLE_ERROR,\r\n    payload: {\r\n        errorMessage: errorMessage\r\n    }\r\n});\r\n\r\nexport const countCorrectAnswer = () => ({\r\n    type: ActionTypes.COUNT_CORRECT_ANSWER\r\n});\r\n\r\nexport const changeRequestStatus = (sent) => ({\r\n    type: ActionTypes.CHANGE_REQUEST_STATUS,\r\n    payload: {\r\n        status: sent\r\n    }\r\n})\r\n\r\nexport const addFlagToShownFlags = (index) => ({\r\n    type: ActionTypes.ADD_FLAG_TO_SHOWN_FLAGS,\r\n    payload: {\r\n        index: index\r\n    }\r\n});\r\n\r\nexport const changeCurrentFlagIndex = (index) => ({\r\n    type: ActionTypes.CHANGE_CURRENT_FLAG_INDEX,\r\n    payload: {\r\n        index: index\r\n    }\r\n});\r\n","export const CHANGE_MARKER_POSITION = 'CHANGE_MARKER_POSITION';\r\nexport const CHANGE_CURRENT_FLAG_INDEX = 'CHANGE_CURRENT_FLAG_INDEX';\r\nexport const ADD_FLAG_TO_SHOWN_FLAGS = 'ADD_FLAG_TO_SHOWN_FLAGS';\r\nexport const COUNT_CORRECT_ANSWER = 'COUNT_CORRECT_ANSWER';\r\nexport const HANDLE_ERROR = 'HANDLE_ERROR';\r\nexport const CHANGE_REQUEST_STATUS = 'CHANGE_REQUEST_STATUS';\r\n//TODO\r\nexport const TOGGLE_DRAGGABLE = 'TOGGLE_DRAGGABLE';\r\nexport const CHANGE_GAME_STATUS = 'CHANGE_GAME_STATUS';","import React, { Component } from 'react';\r\n\r\nimport { Container, Row, Col, Button } from 'reactstrap';\r\nimport { Jumbotron } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { changeCurrentFlag, fetchAddress, setRandomFirstIndex } from '../redux/ActionCreators';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    flags: state.flags,\r\n    game: state.game,\r\n    requestSent: state.requestSent,\r\n    marker: state.marker\r\n  }\r\n}\r\n  \r\nconst mapDispatchToProps = dispatch => ({\r\n  changeCurrentFlag: () => {dispatch(changeCurrentFlag())},\r\n  fetchAddress: () => {dispatch(fetchAddress())},\r\n  setRandomFirstIndex: () => {dispatch(setRandomFirstIndex())}\r\n});\r\n\r\nclass GuessGame extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    if (!this.props.game.isInProgress){\r\n      this.props.setRandomFirstIndex();\r\n    }\r\n  }\r\n  //handle click\r\n  handleConfirmation = () => {\r\n    //TODO: img names shouldnt hint\r\n    this.props.fetchAddress();\r\n    //this.props.changeCurrentFlag();\r\n  }\r\n\r\n  handleStart = () => {\r\n    //component did mount?\r\n    /*if (!this.props.game.isInProgress){\r\n      this.props.setRandomFirstIndex();\r\n    }*/\r\n    //<img src={this.props.flags[this.props.game.currentFlagIndex].path} className=\"flag-img\" alt=\"Image\"/>\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Jumbotron className=\"position-fixed\" style={{padding:\"1rem\"}}>\r\n        <Container>\r\n          <Row>\r\n            <Col xs=\"12\" sm=\"4\">\r\n            <img src={this.props.flags[this.props.game.currentFlagIndex].path} className=\"flag-img\" alt=\"[Выбранный флаг]\"/>\r\n            </Col>\r\n            <Col>\r\n              <p className=\"lead\">Флаг #{this.props.game.shownFlags.length + 1} \r\n              </p>\r\n              <p className=\"lead\">\r\n              Правильных ответов: {this.props.game.correctAnswers}\r\n              </p>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n        <p>Потяните <FontAwesomeIcon icon={faMapMarkerAlt} /> маркер на карте, чтобы указать страну</p>\r\n        <hr className=\"my-2\" />\r\n        <p>\r\n          Текущие координаты <FontAwesomeIcon icon={faMapMarkerAlt} />: \r\n          {this.props.marker ? \r\n            \"  \" + this.props.marker.lat.toFixed(2) +\", \"+ this.props.marker.lng.toFixed(2) :\r\n            \"Маркер не найден\"}\r\n        </p>\r\n        <p className=\"lead\">\r\n        <Button color=\"primary\" disabled={this.props.requestSent} onClick={this.handleConfirmation}>\r\n          Подтвердить выбранные координаты\r\n          </Button>\r\n        </p>\r\n      </Jumbotron>\r\n    )\r\n  }\r\n\r\n  /*render() {\r\n    return (\r\n      <Card className=\"text-center\">\r\n      <CardHeader>Drag the marker on the map to point the country</CardHeader>\r\n      <CardBody>        \r\n        <Media body>\r\n          <Media heading>\r\n            Flag #{this.props.game.shownFlags.length + 1} \r\n            {\" \"}(correct answers: {this.props.game.correctAnswers})\r\n          </Media>\r\n        </Media>\r\n        <Media left className=\"flag-img\">\r\n          <Media object src={this.props.flags[this.props.game.currentFlagIndex].path} alt=\"Image\" />   \r\n        </Media>\r\n        <Button color=\"primary\" onClick={this.handleConfirmation}>\r\n          {\" Select coordinates: \"}\r\n          <FontAwesomeIcon icon={faMapMarkerAlt} />\r\n          {this.props.marker ? \r\n            \"  \" + this.props.marker.lat.toFixed(2) +\", \"+ this.props.marker.lng.toFixed(2) :\r\n            \"No marker found\"}\r\n        </Button>\r\n      </CardBody>\r\n      \r\n      </Card>\r\n    )\r\n  }*/\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GuessGame);","import React, { createRef, Component } from 'react';\r\nimport { Map, TileLayer, Marker } from 'react-leaflet';\r\n\r\nimport GuessGame from './GuessGame';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { changeMarkerPosition } from '../redux/ActionCreators';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    map: state.map,\r\n    marker: state.marker\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeMarkerPosition: (lat, lng) => dispatch(changeMarkerPosition(lat, lng))\r\n});\r\n\r\nclass GuessMap extends Component<{}, State> {\r\n\r\n  // $FlowFixMe: ref\r\n  //refmarker = createRef<Marker>()\r\n  refmarker = createRef()\r\n  refmap = createRef()\r\n\r\n  toggleDraggable = () => {\r\n    // + action\r\n    //this.setState({ draggable: !this.state.draggable })\r\n  }\r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n  updatePosition = () => {    \r\n    const marker = this.refmarker.current;\r\n    if (marker != null) {\r\n      const newPosition = marker.leafletElement.getLatLng();\r\n      // + action\r\n      this.props.changeMarkerPosition(newPosition.lat, newPosition.lng);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate = () => {\r\n    if (this.refmap.current) {\r\n      this.refmap.current.leafletElement.invalidateSize();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const position = [this.props.map.center.lat, this.props.map.center.lng];\r\n    const markerPosition = [this.props.marker.lat, this.props.marker.lng];\r\n\r\n    return (\r\n      <div>\r\n        \r\n      <Map center={position} zoom={this.props.map.zoom} ref={this.refmap}>\r\n        <TileLayer\r\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        <Marker\r\n          draggable={this.props.marker.draggable}\r\n          onDragend={this.updatePosition}\r\n          position={markerPosition}\r\n          ref={this.refmarker}>\r\n        </Marker>\r\n      </Map>\r\n      <GuessGame />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GuessMap);","import React, { Component } from 'react';\r\nimport { Navbar, NavbarText, NavItem, NavLink, Nav } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFlag, faQuestion, faAddressCard, faCode } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Header extends Component {\r\n  \r\n  render() {\r\n    return(\r\n    <React.Fragment>\r\n      <Navbar dark>\r\n        <Nav className=\"mr-auto\" style={{flexDirection:\"row\"}} navbar>\r\n          <NavItem active>\r\n            <NavLink style={{padding:\"0.5rem\"}}>\r\n              <FontAwesomeIcon icon={faFlag} />\r\n              <FontAwesomeIcon icon={faQuestion} />\r\n              {\" Укажите страну по ее флагу\"}\r\n            </NavLink>\r\n          </NavItem>\r\n          <NavItem>\r\n            <NavLink style={{padding:\"0.5rem\"}} href=\"https://github.com/AndreyZhartun/point-the-flag\">\r\n              <FontAwesomeIcon icon={faCode} />\r\n              {\" Github \"}\r\n            </NavLink>\r\n          </NavItem>\r\n          <NavItem>\r\n            <NavLink href=\"/\">\r\n              <FontAwesomeIcon icon={faAddressCard} />\r\n              {\" Про меня\"}\r\n            </NavLink>\r\n          </NavItem>\r\n        </Nav>\r\n        <NavbarText>React, leaflet.js, Nominatim API</NavbarText>\r\n        </Navbar>\r\n    </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import { FLAGS } from '../shared/flags.json';\r\n//TODO: make flags json\r\nimport * as ActionTypes from './ActionTypes';\r\n\r\nexport const initialState = {\r\n    flags: FLAGS,\r\n    game: {\r\n        currentFlagIndex: 0,\r\n        shownFlags: [],\r\n        correctAnswers: 0,\r\n        isInProgress: false\r\n    },\r\n    map: {\r\n        center: {\r\n            lat: 40,\r\n            lng: 12,\r\n        },\r\n        zoom: 3\r\n    },\r\n    marker: {\r\n        lat: 51.505,\r\n        lng: -0.09,\r\n        draggable: true\r\n    },\r\n    requestSent: false,\r\n    errorMessage: \"\" \r\n};\r\n\r\nexport const Reducer = (state, action) => {\r\n    switch (action.type) {\r\n        //Map\r\n        case ActionTypes.CHANGE_MARKER_POSITION:\r\n            const newMarker = {\r\n                ...(state.marker),\r\n                lat: action.payload.lat,\r\n                lng: action.payload.lng\r\n            };\r\n            return {\r\n                ...state,\r\n                marker: newMarker\r\n            };\r\n        //Game\r\n        case ActionTypes.ADD_FLAG_TO_SHOWN_FLAGS:\r\n            var newArray = state.game.shownFlags.concat(action.payload.index);\r\n            const gameWithNewShownFlags = {\r\n                ...(state.game),\r\n                shownFlags: newArray\r\n            }\r\n            return {\r\n                ...state,\r\n                game: gameWithNewShownFlags\r\n            };\r\n        case ActionTypes.CHANGE_CURRENT_FLAG_INDEX:\r\n            const gameWithNewIndex = {\r\n                ...(state.game),\r\n                currentFlagIndex: action.payload.index\r\n            };\r\n            return {\r\n                ...state,\r\n                game: gameWithNewIndex\r\n            };\r\n        case ActionTypes.COUNT_CORRECT_ANSWER:\r\n            const newCorrectAnswers = state.game.correctAnswers + 1;\r\n            return {\r\n                ...state,\r\n                game: {\r\n                    ...(state.game),\r\n                    correctAnswers: newCorrectAnswers\r\n                }\r\n            };\r\n        case ActionTypes.CHANGE_GAME_STATUS:\r\n            return {\r\n                ...state,\r\n                game: {\r\n                    ...(state.game),\r\n                    isInProgress: action.payload.status\r\n                }\r\n            }\r\n        //fetch request\r\n        case ActionTypes.CHANGE_REQUEST_STATUS:\r\n            return {\r\n                ...state,\r\n                requestSent: action.payload.status\r\n            }\r\n        case ActionTypes.HANDLE_ERROR:\r\n            return {\r\n                ...state,\r\n                errorMessage: action.payload.errorMessage\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};","import React from 'react';\nimport './App.css';\n\nimport GuessMap from './components/GuessMap';\nimport Header from './components/Header';\n\nimport { Provider } from 'react-redux';\nimport { ConfigureStore } from './redux/configureStore';\n\nconst store = ConfigureStore();\n\nfunction App(){\n  return (\n    <Provider store={store}>\n      <Header />\n      <GuessMap />\n    </Provider>\n  );\n}\n\nexport default App;\n","import {createStore, applyMiddleware} from 'redux';\r\nimport { Reducer, initialState } from './reducer';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\n\r\nexport const ConfigureStore = () => {\r\n    const store = createStore(\r\n        Reducer, // reducer\r\n        initialState, // our initialState\r\n        applyMiddleware(thunk, logger)\r\n    );\r\n\r\n    return store;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}